//
//  HmEncrypt.m
//  CTest
//
//  Created by haimen_ios_imac on 2017/5/18.
//  Copyright © 2017年 深圳海曼科技有限公司. All rights reserved.
//

#import "HmEncrypt.h"
#import "aes128.h"
#import "base64.h"
//#import "JSONKit.h"

@implementation HmEncrypt


+ (NSData *)aesEncrypt:(NSData *)data key:(NSData *)key
{
    Byte *keyByte = (Byte *)[key bytes];
    unsigned int len;
    Byte *bytes = (Byte *)[data bytes];
    unsigned int len_byte = (unsigned int)[data length];
    unsigned char byteOut[len_byte + 16];
    len = EncryptBuf(bytes, len_byte, byteOut, keyByte);
    NSData *encryptData = [[NSData alloc] initWithBytes:byteOut length:len];
    NSData *retData = [encryptData base64EncodedDataWithOptions:0];
    return retData;
}

+ (NSData *)aesDecrypt:(NSData *)data key:(NSData *)key
{
    NSString *retString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    NSData *resultData = [[NSData alloc] initWithBase64EncodedString:retString options:NSDataBase64DecodingIgnoreUnknownCharacters];
    Byte *keyByte = (Byte *)[key bytes];
    unsigned int len;
    unsigned int lengtha = (unsigned int)[data length];

    unsigned char byteOut2[lengtha + 16];
    len = DecryptBuf( (Byte *)[resultData bytes], (unsigned int)[resultData length], byteOut2, keyByte);
    NSData *decodeData = [NSData dataWithBytes:byteOut2 length:len];
    return decodeData;
}

+ (unsigned char *)getKey:(unsigned char *)lpKey
{
    unsigned char rand[256] =
    {
        //16*16矩阵
        0x33,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34,
        0x32,0x43,0xf6,0xad,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x06,0x33
    };
    HMMakeKey(rand, lpKey);

    return lpKey;
}

+ (NSDictionary *)hmDecryptWithPrivateKey:(NSString *)key payData:(NSData *)payData
{
    if (!key) return nil;
    NSData *subData = [payData subdataWithRange:NSMakeRange(1, [payData length]-2)];
    
    NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];
    NSData *deData = [HmEncrypt aesDecrypt:subData key:keyData];
    
    NSError *error = nil;
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:deData options:NSJSONReadingMutableContainers error:&error];
    if(error) {
        NSLog(@"json解析失败：%@",error);
        return nil;
    }
    return dic;
}

//加密
+ (NSString *)hmEncrypt:(NSString *)key jsonData:(NSDictionary *)jsonDict
{
    if (!key || !jsonDict) {
        return nil;
    }
    NSError *error = nil;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDict options:0 error:&error];
    if (error) {
        return nil;
    }
    NSData *keyData = [key dataUsingEncoding:NSUTF8StringEncoding];
    NSData *encryptData = [HmEncrypt aesEncrypt:jsonData key:keyData];
    NSString *str = [[NSString alloc] initWithData:encryptData encoding:NSUTF8StringEncoding];
    NSString * newStr = [NSString stringWithFormat:@"^%@&", str];
    
    return newStr;
}

@end
